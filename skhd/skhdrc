# disable MacOS default cmd - h
cmd - h : [ ]

# Overrided MacOS default spaces navigation
ctrl - right : yabai -m space --focus next || yabai -m space --focus first
ctrl - left  : yabai -m space --focus prev || yabai -m space --focus last

# Space navigation (four spaces per display): cmd - {1, 2, 3, 4}
cmd - 1 : set -l SPACES (yabai -m query --displays --display | jq '.spaces[]') && [ -n $SPACES[1] ] && yabai -m space --focus $SPACES[1]
cmd - 2 : set -l SPACES (yabai -m query --displays --display | jq '.spaces[]') && [ -n $SPACES[2] ] && yabai -m space --focus $SPACES[2]
cmd - 3 : set -l SPACES (yabai -m query --displays --display | jq '.spaces[]') && [ -n $SPACES[3] ] && yabai -m space --focus $SPACES[3]
cmd - 4 : set -l SPACES (yabai -m query --displays --display | jq '.spaces[]') && [ -n $SPACES[4] ] && yabai -m space --focus $SPACES[4]

# Window cyclic navigation
cmd - j : yabai -m window --focus $(yabai -m query --windows --space | jq 'sort_by(.id) | .[(to_entries | .[] | select(.value."has-focus") | .key + 1) % length] | .id')
cmd - k : yabai -m window --focus $(yabai -m query --windows --space | jq 'sort_by(.id) | .[(to_entries | .[] | select(.value."has-focus") | .key - 1) % length] | .id')

# Display cyclic navigation
cmd + shift - j : yabai -m display --focus next || yabai -m display --focus first
cmd + shift - k : yabai -m display --focus prev || yabai -m display --focus last

# Window + Display directional navigation
cmd + ctrl - h : yabai -m window --focus west || yabai -m display --focus west
cmd + ctrl - j : yabai -m window --focus south || yabai -m display --focus south
cmd + ctrl - k : yabai -m window --focus north || yabai -m display --focus north
cmd + ctrl - l : yabai -m window --focus east || yabai -m display --focus east

# Moving windows between spaces: alt - {1, 2, 3, 4} (Assumes 4 Spaces Max per Display)
alt - 1 : set -l SPACES (yabai -m query --displays --display | jq '.spaces[]') && [ -n $SPACES[1] ] \
                  && yabai -m window --space $SPACES[1] && yabai -m space --focus $SPACES[1] 
alt - 2 : set -l SPACES (yabai -m query --displays --display | jq '.spaces[]') && [ -n $SPACES[2] ] \
                  && yabai -m window --space $SPACES[2] && yabai -m space --focus $SPACES[2]
alt - 3 : set -l SPACES (yabai -m query --displays --display | jq '.spaces[]') && [ -n $SPACES[3] ] \
                  && yabai -m window --space $SPACES[3] && yabai -m space --focus $SPACES[3]
alt - 4 : set -l SPACES (yabai -m query --displays --display | jq '.spaces[]') && [ -n $SPACES[4] ] \
                  && yabai -m window --space $SPACES[4] && yabai -m space --focus $SPACES[4]

# Moving windows between spaces on next display: alt + shift - {1, 2, 3, 4} (Assumes 4 Spaces Max per Display)
#   query display then (display id % display number) to move window to next display spaces
alt + shift - 1 : set -l CURRENT_DISPLAY_ID (yabai -m query --displays --space | jq '.id') \
                        && set -l SPACES (yabai -m query --displays | jq --argjson current_id $CURRENT_DISPLAY_ID '.[(to_entries | .[] | select(.value."id" == ($current_id % length) + 1) | .key)] | .spaces[]') \
                        && [ -n $SPACES[1] ] && yabai -m window --space $SPACES[1] && yabai -m space --focus $SPACES[1] && yabai -m space --balance
alt + shift - 2 : set -l CURRENT_DISPLAY_ID (yabai -m query --displays --space | jq '.id') \
                        && set -l SPACES (yabai -m query --displays | jq --argjson current_id $CURRENT_DISPLAY_ID '.[(to_entries | .[] | select(.value."id" == ($current_id % length) + 1) | .key)] | .spaces[]') \
                        && [ -n $SPACES[2] ] && yabai -m window --space $SPACES[2] && yabai -m space --focus $SPACES[2] && yabai -m space --balance
alt + shift - 3 : set -l CURRENT_DISPLAY_ID (yabai -m query --displays --space | jq '.id') \
                        && set -l SPACES (yabai -m query --displays | jq --argjson current_id $CURRENT_DISPLAY_ID '.[(to_entries | .[] | select(.value."id" == ($current_id % length) + 1) | .key)] | .spaces[]') \
                        && [ -n $SPACES[3] ] && yabai -m window --space $SPACES[3] && yabai -m space --focus $SPACES[3] && yabai -m space --balance
alt + shift - 4 : set -l CURRENT_DISPLAY_ID (yabai -m query --displays --space | jq '.id') \
                        && set -l SPACES (yabai -m query --displays | jq --argjson current_id $CURRENT_DISPLAY_ID '.[(to_entries | .[] | select(.value."id" == ($current_id % length) + 1) | .key)] | .spaces[]') \
                        && [ -n $SPACES[4] ] && yabai -m window --space $SPACES[4] && yabai -m space --focus $SPACES[4] && yabai -m space --balance

# Moving windows in spaces
ctrl + lalt - h : yabai -m window --warp west  \
                        || begin; yabai -m window --display west && yabai -m display --focus west && yabai -m window --warp last; end
ctrl + lalt - j : yabai -m window --warp south \
                        || begin; yabai -m window --display south && yabai -m display --focus south; end
ctrl + lalt - k : yabai -m window --warp north \
                        || begin; yabai -m window --display north && yabai -m display --focus north; end
ctrl + lalt - l : yabai -m window --warp east  \
                        || begin; yabai -m window --display east && yabai -m display --focus east && yabai -m window --warp first; end

## Stacks (ctrl + shift - ...)
# Add the active window to the window or stack to the {direction}: shift + ctrl - {h, j, k, l}
ctrl + shift - h : yabai -m window  west --stack $(yabai -m query --windows --window | jq -r '.id') && sketchybar --trigger window_focus
ctrl + shift - j : yabai -m window south --stack $(yabai -m query --windows --window | jq -r '.id') && sketchybar --trigger window_focus
ctrl + shift - k : yabai -m window north --stack $(yabai -m query --windows --window | jq -r '.id') && sketchybar --trigger window_focus
ctrl + shift - l : yabai -m window  east --stack $(yabai -m query --windows --window | jq -r '.id') && sketchybar --trigger window_focus

# Toggle layout of the space (bsp, stack)
ctrl + lalt - x : yabai -m space --layout "$(if [ $(yabai -m query --spaces --space | jq -r '.type') = 'bsp' ]; echo 'stack'; else; echo 'bsp'; end)"; sketchybar --trigger window_focus

# toggle sticky(+float), topmost, picture-in-picture
ctrl + lalt - p : yabai -m window --toggle sticky --toggle topmost; sketchybar --trigger window_focus

# Float / Unfloat window: ctrl + lalt - space
ctrl + lalt - space : yabai -m window --toggle float; sketchybar --trigger window_focus

# Make window zoom to fullscreen: ctrl + lalt + enter
ctrl + lalt - 0x24 : yabai -m window --toggle zoom-fullscreen; sketchybar --trigger window_focus

# Make window zoom to parent node
ctrl + lalt + shift - 0x24 : yabai -m window --toggle zoom-parent; sketchybar --trigger window_focus

# Toggle split orientation of the selected windows node: ctrl + lalt - s
ctrl + lalt - s : yabai -m window --toggle split

# Mirror Space on X and Y Axis: shift + lalt - {-, |}
ctrl + lalt - 0x1B : yabai -m space --mirror x-axis # -
ctrl + lalt - 0x2A : yabai -m space --mirror y-axis # |

## Resize (ctrl + lalt - ...)
# Resize windows: ctrl + lalt - {<, >}
ctrl + lalt - 0x2B : yabai -m window --resize right:-100:0 || yabai -m window --resize left:-100:0
ctrl + lalt - 0x2F : yabai -m window --resize right:100:0 || yabai -m window --resize left:100:0

# Equalize size of windows: ctrl + lalt - e
ctrl + lalt - e : yabai -m space --balance

# Enable / Disable gaps in current workspace: ctrl + lalt - g
ctrl + lalt - g : yabai -m space --toggle padding; yabai -m space --toggle gap

## Misc
# Open new kitty window
# lalt - t : kitty msg create-window

# New window in hor./ vert. splits for all applications with yabai
# lalt - s : yabai -m window --insert south;  skhd -k "cmd - n"
# lalt - v : yabai -m window --insert east; skhd -k "cmd - n"

# Toggle sketchybar
# ctrl + lalt - space : sketchybar --bar hidden=toggle
ctrl + lalt - r : sketchybar --remove '/.*/' && sh -c '$HOME/.config/sketchybar/sketchybarrc'
